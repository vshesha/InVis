package invis.gl.sequencedistributions;

import NetworkApi.NetworkCaseApi;
import NetworkApi.NetworkCaseSetApi;
import NetworkApi.NetworkElementApi;
import NetworkApi.NetworkSequenceSetApi;
import NetworkSequenceNodes.NetworkSequenceNodeFactory;
import NetworkSequenceNodes.NetworkSequenceSetNode;
import invis.gl.dataprocessor.DataParser;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//invis.gl.sequencedistributions//SDBeanTree//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "SDBeanTreeTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "invis.gl.sequencedistributions.SDBeanTreeTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_SDBeanTreeAction",
preferredID = "SDBeanTreeTopComponent")
@Messages({
    "CTL_SDBeanTreeAction=SDBeanTree",
    "CTL_SDBeanTreeTopComponent=SDBeanTree Window",
    "HINT_SDBeanTreeTopComponent=This is a SDBeanTree window"
})
public final class SDBeanTreeTopComponent extends TopComponent implements ExplorerManager.Provider { //does explorermanager.provider allow the beantree view to access the info or what(yes, that's exactly what it does)

    private ExplorerManager mgr = new ExplorerManager();
    private NetworkSequenceSetApi setCases;
    private DataParser mDataParser;
    private HashMap<String, NetworkElementApi> nodeTable;
    private final int MAX_SEQUENCES;
    private ArrayList<NetworkCaseApi> topCaseSequences;
    private NetworkCaseSetApi compCaseSet;

    public SDBeanTreeTopComponent() {
        MAX_SEQUENCES = 10;
        setCases = null;
        initComponents();
        this.associateLookup(ExplorerUtils.createLookup(mgr, this.getActionMap()));
        setName(Bundle.CTL_SDBeanTreeTopComponent());
        setToolTipText(Bundle.HINT_SDBeanTreeTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView = new javax.swing.JScrollPane();
        seqNumSlider = new javax.swing.JSlider();
        slideLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        beanTreeView = new BeanTreeView();
        beanTreeView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                beanTreeViewMouseClicked(evt);
            }
        });

        seqNumSlider.setMajorTickSpacing(2);
        seqNumSlider.setMaximum(10);
        seqNumSlider.setMinorTickSpacing(1);
        seqNumSlider.setPaintLabels(true);
        seqNumSlider.setPaintTicks(true);
        seqNumSlider.setSnapToTicks(true);
        seqNumSlider.setValue(3);
        seqNumSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                seqNumSliderStateChanged(evt);
            }
        });

        slideLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        slideLabel.setLabelFor(seqNumSlider);
        org.openide.awt.Mnemonics.setLocalizedText(slideLabel, org.openide.util.NbBundle.getMessage(SDBeanTreeTopComponent.class, "SDBeanTreeTopComponent.slideLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beanTreeView)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(seqNumSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(slideLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(beanTreeView, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(slideLabel)
                .addGap(10, 10, 10)
                .addComponent(seqNumSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void beanTreeViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_beanTreeViewMouseClicked
    }//GEN-LAST:event_beanTreeViewMouseClicked

    private void seqNumSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_seqNumSliderStateChanged

        //FindTopSequences();
        this.RefreshContents();
    }//GEN-LAST:event_seqNumSliderStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane beanTreeView;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider seqNumSlider;
    private javax.swing.JLabel slideLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        mDataParser = Lookup.getDefault().lookup(DataParser.class);
        if (mDataParser.hasData()) {
            mDataParser.getNetworkSequences(10);
            setCases = mDataParser.getTopNetworkSequenceSet();//.trimTo(30);
        }
        this.RefreshContents();
    }

    public void RefreshContents() {
        //if (mDataParser.hasData()) {
        //compCaseSet = mDataParser.getNetworkCaseSet(); 
        //    setCases = mDataParser.getTopNetworkSequenceSet();
        //} 
        if (setCases != null) {
            
            NetworkSequenceNodeFactory y;
            y = new NetworkSequenceNodeFactory(setCases.trimTo(150));
                    
            Children x;
            x = Children.create(y, true);
            
            Node trueRoot;
            trueRoot = new NetworkSequenceSetNode(x, setCases.trimTo(150));
            
            /*Node trueRoot = new NetworkSequenceSetNode(Children.create(
                    new NetworkSequenceNodeFactory(setCases.trimTo(150)), true),
                    setCases.trimTo(150));
            */
            

            //new NetworkSequenceNodeFactory(setCases.trimTo(seqNumSlider.getValue())), true),
            //setCases.trimTo(seqNumSlider.getValue()));
            mgr.setRootContext(trueRoot);
            mgr.getRootContext().setDisplayName("File: " + mDataParser.getFileName() + " Top 3 Sequence Actions");

        } else {
            AbstractNode EmptyNode = new AbstractNode(Children.LEAF);
            EmptyNode.setName("File not loaded.");
            mgr.setRootContext(EmptyNode);
        }
    }

public void ClearContents()
{
        setCases = null;
    }


    /* public void FindTopSequences() {
     ArrayList<NetworkCaseApi> caseSet = null;
     ArrayList<NetworkInteractionApi> interactionsList = null;
     final Bag<ArrayList<NetworkInteractionApi>> interactionsBag = new HashBag<ArrayList<NetworkInteractionApi>>();

     if (mDataParser.hasData()) {
     caseSet = mDataParser.getNetworkCaseSet().getNetworkCaseList();
     for (int i = 0; i < caseSet.size(); i++) {
     interactionsList = caseSet.get(i).getInteractionsList();
     for (int k = 0; k < interactionsList.size(); k++) {
     for (int j = 0; j + k < interactionsList.size(); j++) {
     ArrayList<NetworkInteractionApi> curChain = new ArrayList<NetworkInteractionApi>();
     for (int m = 0; m < k + 1; m++) {
     curChain.add(interactionsList.get(j + m));
     }
     interactionsBag.add(curChain);
     }
     }
     }


     //possibly faster to sort the entire thing but how can you sort a unique set based upon getCount from interactionsBag?
     Set<ArrayList<NetworkInteractionApi>> uniqueSet = interactionsBag.uniqueSet(); //create a linkedlist containing on the top 3 frequently occuring subsequences
     int minBar = 0;
     ArrayList<ArrayList<NetworkInteractionApi>> maxList = new ArrayList<ArrayList<NetworkInteractionApi>>();
     for (ArrayList<NetworkInteractionApi> a : uniqueSet) {
     if (maxList.size() > (MAX_SEQUENCES - 1)) {
     if (interactionsBag.getCount(a) > minBar) {
     minBar = interactionsBag.getCount(a);
     maxList.add(a);
     int i = 9999999;
     ArrayList<NetworkInteractionApi> temp = null;
     for (ArrayList<NetworkInteractionApi> b : maxList) {
     if (interactionsBag.getCount(b) < i) {
     temp = b;
     i = interactionsBag.getCount(b);
     }
     }
     maxList.remove(temp);           //remove the lowest occuring element from list
     minBar = 999999;
     for (ArrayList<NetworkInteractionApi> b : maxList) {
     if (interactionsBag.getCount(b) < minBar) {
     minBar = interactionsBag.getCount(b);
     }
     }
     }
     } else {
     maxList.add(a);
     if (minBar == 0) {
     minBar = interactionsBag.getCount(a);
     } else {
     if (interactionsBag.getCount(a) < minBar) {
     minBar = interactionsBag.getCount(a);
     }
     }
     }
     }

     SortOnCount(maxList, interactionsBag);

     for (ArrayList<NetworkInteractionApi> a : maxList) {
     System.out.println(a + " Count: " + interactionsBag.getCount(a));
     }
              

     ArrayList<NetworkCaseApi> topCases = new ArrayList<NetworkCaseApi>();
     for (ArrayList<NetworkInteractionApi> curCase : maxList) {
     topCases.add(new NetworkCaseModel(curCase.toString() + "Count: " + interactionsBag.getCount(curCase), curCase));
     }

     topCaseSequences = topCases;

     //ArrayList<NetworkCaseApi> maxCase = new ArrayList<NetworkCaseApi>();
     //maxCase.add(new NetworkCaseModel("Most Frequent Chain with " + maxList));
     } else {
     setCases = null;
     topCaseSequences = null;
     }
     }*/
    //specialized sort function to sort on the number of the sequences in the bag
    /*public static void SortOnCount(ArrayList<ArrayList<NetworkInteractionApi>> list, Bag<ArrayList<NetworkInteractionApi>> bag) {
     for (int i = 0; i < list.size(); i++) {
     int min = i;
     for (int y = i; y < list.size(); y++) {
     if (bag.getCount(list.get(min)) < bag.getCount(list.get(y))) {
     min = y;
     }
     }
     ArrayList<NetworkInteractionApi> temp = list.get(i);
     list.set(i, list.get(min));
     list.set(min, temp);
     }
     }*/
    @Override
        public void componentClosed() {
        try {
            mgr.getRootContext().destroy();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
        public ExplorerManager getExplorerManager() {
        return mgr;
    }
}
