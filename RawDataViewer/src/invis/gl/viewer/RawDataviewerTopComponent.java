package invis.gl.viewer;

import invis.gl.dataprocessor.DataParser;
import invis.gl.nodes.CaseNodeFactory;
import invis.gl.nodes.CaseSetNode;
import java.io.IOException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//invis.gl.viewer//viewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "viewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "invis.gl.viewer.viewerTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_viewerAction",
preferredID = "viewerTopComponent")
public final class RawDataviewerTopComponent extends TopComponent implements ExplorerManager.Provider
{

    private ExplorerManager mgr = new ExplorerManager();
    private DataParser mDataParser;

    public RawDataviewerTopComponent()
    {
        initComponents();
        this.associateLookup(ExplorerUtils.createLookup(mgr, this.getActionMap()));
        
        setName(NbBundle.getMessage(RawDataviewerTopComponent.class, "CTL_viewerTopComponent"));
        setToolTipText(NbBundle.getMessage(RawDataviewerTopComponent.class, "HINT_viewerTopComponent"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();

        jScrollPane1 = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened()
    {
        mDataParser = Lookup.getDefault().lookup(DataParser.class);
        this.RefreshContents();
    }
    
    public void ClearContents() throws IOException
    {
        this.getExplorerManager().getRootContext().destroy();
    }
    
    public void RefreshContents()
    {
       if (mDataParser.hasData())
        {
            mgr.setRootContext(new CaseSetNode(Children.create(new CaseNodeFactory(mDataParser.getCaseSet()), true), mDataParser.getCaseSet()));
            mgr.getRootContext().setDisplayName(mDataParser.getFileName());

        } else
        {
            AbstractNode EmptyNode = new AbstractNode(Children.LEAF);
            EmptyNode.setName("File not loaded.");
            mgr.setRootContext(EmptyNode);
        } 
    }

    @Override
    public void componentClosed()
    {
        try
        {
            mgr.getRootContext().destroy();
        } catch (IOException ex)
        {
            Exceptions.printStackTrace(ex);
        }
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager()
    {
        return (mgr);
    }
}
