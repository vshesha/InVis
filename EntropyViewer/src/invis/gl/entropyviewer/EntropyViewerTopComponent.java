package invis.gl.entropyviewer;

import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import invis.gl.NetworkVisualizationViewer.NetworkVisualizationViewer;
import invis.gl.dataprocessor.DataParser;
import invis.gl.entropy.Nodes.EntropyVertexSetNode;
import invis.gl.entropy.transformers.EntropyShapeTransformer;
import invis.gl.entropy.transformers.EntropyVertexPainter;
import invis.gl.entropy.transformers.ExpectedDifficultyVertexPainter;
import invis.gl.graphvisualapi.NetworkDisplayApi.DisplayType;
import invis.gl.networkapi.NetworkElementApi;
import invis.gl.networkapi.NetworkVVDisplay;
import invis.gl.networkapi.NodeViewerTopComponentExtension;
import invis.gl.networkapi.VisualEditorTopComponentExtension;
import java.awt.Paint;
import java.awt.Shape;
import java.io.IOException;
import java.util.HashMap;
import org.apache.commons.collections15.Transformer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//invis.gl.entropyviewer//EntropyViewer//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "EntropyViewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "invis.gl.entropyviewer.EntropyViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_EntropyViewerAction",
preferredID = "EntropyViewerTopComponent")
@Messages(
{
    "CTL_EntropyViewerAction=EntropyViewer",
    "CTL_EntropyViewerTopComponent=EntropyViewer Window",
    "HINT_EntropyViewerTopComponent=This is a EntropyViewer window"
})
public final class EntropyViewerTopComponent extends NodeViewerTopComponentExtension implements Lookup.Provider
{

    private ExplorerManager mgr = new ExplorerManager();
    private Lookup mLookup;
    private InstanceContent mInstanceContent;
    private DirectedSparseMultigraph<String, String> mGraph;
    private HashMap<String, Integer> mGoalCountDataTable;
    private HashMap<String, Integer> mFailCountDataTable;
    private HashMap<String, Double> mExpectedDifficultyDataTable;
    Integer mMinGoalCaseCount = Integer.MAX_VALUE, mMaxGoalCaseCount = 0;
    Integer mMinFailCaseCount = Integer.MAX_VALUE, mMaxFailCaseCount = 0;
    Double mMinExpectedDifficulty = Double.MAX_VALUE, mMaxExpectedDifficulty = 0.0;
    Transformer<String, Shape> previousVertexShapeTransformer;
    Transformer<String, Paint> previousVertexDrawPaintTransformer;

    public EntropyViewerTopComponent()
    {
        initComponents();

        mInstanceContent = new InstanceContent();
        mLookup = new AbstractLookup(mInstanceContent);

        mGoalCountDataTable = new HashMap<String, Integer>();
        mFailCountDataTable = new HashMap<String, Integer>();

        mExpectedDifficultyDataTable = new HashMap<String, Double>();

        setName(Bundle.CTL_EntropyViewerTopComponent());
        setToolTipText(Bundle.HINT_EntropyViewerTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        beanTreeView = new javax.swing.JScrollPane();
        mEntropyVisionToggle = new javax.swing.JToggleButton();
        mExpectedDifficultyToggle = new javax.swing.JToggleButton();

        beanTreeView = new BeanTreeView();

        org.openide.awt.Mnemonics.setLocalizedText(mEntropyVisionToggle, org.openide.util.NbBundle.getMessage(EntropyViewerTopComponent.class, "EntropyViewerTopComponent.mEntropyVisionToggle.text")); // NOI18N
        mEntropyVisionToggle.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mEntropyVisionToggleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mExpectedDifficultyToggle, org.openide.util.NbBundle.getMessage(EntropyViewerTopComponent.class, "EntropyViewerTopComponent.mExpectedDifficultyToggle.text")); // NOI18N
        mExpectedDifficultyToggle.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mExpectedDifficultyToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(beanTreeView)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mEntropyVisionToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mExpectedDifficultyToggle)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(beanTreeView, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mEntropyVisionToggle)
                    .addComponent(mExpectedDifficultyToggle))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mEntropyVisionToggleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mEntropyVisionToggleActionPerformed
    {//GEN-HEADEREND:event_mEntropyVisionToggleActionPerformed
        if (mEntropyVisionToggle.isSelected())
        {
            previousVertexShapeTransformer = mNVV.getRenderContext().getVertexShapeTransformer();
            previousVertexDrawPaintTransformer = mNVV.getRenderContext().getVertexFillPaintTransformer();
            mNVV.getRenderContext().setVertexShapeTransformer(
                    new EntropyShapeTransformer<String>(
                    mDataParser.getNodeTable(),
                    mGoalCountDataTable));

            mNVV.getRenderContext().setVertexFillPaintTransformer(
                    new EntropyVertexPainter<String>(
                    mDataParser.getNodeTable(),
                    mFailCountDataTable));

            ((EntropyShapeTransformer) mNVV.getRenderContext().getVertexShapeTransformer()).UpdateMinMaxDataValues(mMinGoalCaseCount, mMaxGoalCaseCount);
            ((EntropyVertexPainter) mNVV.getRenderContext().getVertexFillPaintTransformer()).UpdateMinMaxDataValues(mMinFailCaseCount, mMaxFailCaseCount);

            StatusDisplayer.getDefault().setStatusText("Node size correlates with Goal-Case-Count. Color correlates with Fail-Case-Count. Red is high failure rate, white is low.");
        } else
        {
            mNVV.getRenderContext().setVertexShapeTransformer(previousVertexShapeTransformer);
            mNVV.getRenderContext().setVertexFillPaintTransformer(previousVertexDrawPaintTransformer);
        }
        ((NetworkVVDisplay) (WindowManager.getDefault().findTopComponent("NetworkDisplayTopComponent"))).RefreshVisualizationViewer();
    }//GEN-LAST:event_mEntropyVisionToggleActionPerformed

    private void mExpectedDifficultyToggleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mExpectedDifficultyToggleActionPerformed
    {//GEN-HEADEREND:event_mExpectedDifficultyToggleActionPerformed
        //Calculate expected Difficulty
        if (mExpectedDifficultyToggle.isSelected())
        {
            previousVertexShapeTransformer = mNVV.getRenderContext().getVertexShapeTransformer();
            previousVertexDrawPaintTransformer = mNVV.getRenderContext().getVertexFillPaintTransformer();

            mNVV.getRenderContext().setVertexFillPaintTransformer(
                    new ExpectedDifficultyVertexPainter<String>(
                    mDataParser.getNodeTable(),
                    mExpectedDifficultyDataTable));
            ((ExpectedDifficultyVertexPainter) mNVV.getRenderContext().getVertexFillPaintTransformer()).UpdateMinMaxDataValues(mMinExpectedDifficulty, mMaxExpectedDifficulty);
            StatusDisplayer.getDefault().setStatusText("Expected Difficulty per State. Percent of students that succeeded.");
        } else
        {
            mNVV.getRenderContext().setVertexShapeTransformer(previousVertexShapeTransformer);
            mNVV.getRenderContext().setVertexFillPaintTransformer(previousVertexDrawPaintTransformer);
        }
        //Send it to the vertex Shape Transformer.
    }//GEN-LAST:event_mExpectedDifficultyToggleActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane beanTreeView;
    private javax.swing.JToggleButton mEntropyVisionToggle;
    private javax.swing.JToggleButton mExpectedDifficultyToggle;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened()
    {
        mDataParser = Lookup.getDefault().lookup(DataParser.class);

        ((NetworkVVDisplay) (WindowManager.getDefault().findTopComponent("NetworkDisplayTopComponent"))).RebroadcastNetworkVisualizationViewer();

        if (mDataParser.hasData())
        {
            this.RefreshContents();
        }
    }

    @Override
    public void ClearContents()
    {
        mInstanceContent = new InstanceContent();
        mLookup = new AbstractLookup(mInstanceContent);
        try
        {
            this.getExplorerManager().getRootContext().destroy();
        } catch (IOException ex)
        {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    public void RefreshContents()
    {
        if (mDataParser.hasData())
        {
            Node trueRoot = new EntropyVertexSetNode(
                    mDataParser.getVertexSet(),
                    mDataParser.getNetworkCaseSet());

            mgr.setRootContext(trueRoot);
            mgr.getRootContext().setDisplayName("File: " + mDataParser.getFileName() + " State Entropy");

            mInstanceContent.add(trueRoot);
            this.calcEntropy();

        } else
        {
            AbstractNode EmptyNode = new AbstractNode(Children.LEAF);
            EmptyNode.setName("File not loaded.");
            mgr.setRootContext(EmptyNode);
        }
    }

    private void calcEntropy()
    {
        //DirectedSparseMultigraph<String, String> graph = mDataParser.getGraph();
        for (int i = 0; i < mGraph.getVertices().size(); i++)
        {
            String vertexKey = mGraph.getVertices().toArray()[i].toString();
            NetworkElementApi node = mDataParser.getNodeTable().get(vertexKey);

            Integer goalCaseCount = node.getGoalCaseCount();
            mGoalCountDataTable.put(vertexKey, goalCaseCount);
            if (goalCaseCount < mMinGoalCaseCount)
            {
                mMinGoalCaseCount = goalCaseCount;
            }
            if (goalCaseCount > mMaxGoalCaseCount)
            {
                mMaxGoalCaseCount = goalCaseCount;
            }
            //int failCount = (node.getUniqueFrequency() - node.getGoalCaseCount());
            Integer failCaseCount = (node.getUniqueFrequency() - node.getGoalCaseCount());
            if (failCaseCount < mMinFailCaseCount)
            {
                mMinFailCaseCount = failCaseCount;
            }
            if (failCaseCount > mMaxFailCaseCount)
            {
                mMaxFailCaseCount = failCaseCount;
            }
            mFailCountDataTable.put(vertexKey, failCaseCount);

            Double expectedDifficulty;
            Double caseCount = Double.valueOf(((double) (node.getGoalCaseCount())));
            Double totalCount = Double.valueOf(((double) (node.getUniqueFrequency())));

            expectedDifficulty = caseCount / totalCount;
            if (expectedDifficulty < mMinExpectedDifficulty)
            {
                mMinExpectedDifficulty = expectedDifficulty;
            }
            if (expectedDifficulty > mMaxExpectedDifficulty)
            {
                mMaxExpectedDifficulty = expectedDifficulty;
            }
            mExpectedDifficultyDataTable.put(vertexKey, expectedDifficulty);
        }
    }

    /*    private void CalculateStateEntropy()
     {
     DirectedSparseMultigraph<String, String> graph = mDataParser.getGraph();

     for (int i = 0; i < graph.getVertices().size(); i++)
     {
     String vertexKey = graph.getVertices().toArray()[i].toString();
     NetworkElementApi node = mDataParser.getNodeTable().get(vertexKey);
     int NodeGoalCaseCount = 0;
     int NodeFailCaseCount = 0;
     for (int j = 0; j < node.getUniqueCaseIdSet().size(); j++)
     {
     if (mDataParser.getNetworkCaseSet().findCaseByCaseId(node.getUniqueCaseIdSet().toArray()[j].toString()).getGoalCase())
     {
     NodeGoalCaseCount++;
     } else
     {
     NodeFailCaseCount++;
     }
     }
     mDataParser.getNodeTable().get(vertexKey).setGoalCaseCount(NodeGoalCaseCount);
     }
     }*/
    @Override
    public void componentClosed()
    {
        try
        {
            mgr.getRootContext().destroy();
        } catch (IOException ex)
        {
            Exceptions.printStackTrace(ex);
        }
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public Lookup getLookup()
    {
        return (mLookup);
    }

    @Override
    public ExplorerManager getExplorerManager()
    {
        return (mgr);
    }

    @Override
    public void UpdateCurrentVV(NetworkVisualizationViewer currentVV, DisplayType type)
    {
        if (mDataParser != null && mDataParser.hasData())
        {
            if (type == DisplayType.NETWORK)
            {
                mNVV = currentVV;
                mGraph = (DirectedSparseMultigraph<String, String>) mNVV.getGraphLayout().getGraph();

            }
        } else
        {
            this.close();
        }
    }
}
