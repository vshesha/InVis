package invis.gl.visualeditor;

import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.FRLayout;
import edu.uci.ics.jung.algorithms.layout.ISOMLayout;
import edu.uci.ics.jung.algorithms.layout.KKLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.algorithms.layout.SpringLayout;
import edu.uci.ics.jung.algorithms.layout.StaticLayout;
import edu.uci.ics.jung.algorithms.layout.TreeLayout;
import edu.uci.ics.jung.graph.DelegateForest;
import edu.uci.ics.jung.graph.DelegateTree;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.Forest;
import invis.gl.NetworkVisualizationViewer.NetworkVisualizationViewer;
import invis.gl.Transformers.EdgeLabelTransformer;
import invis.gl.Transformers.NetworkElementGraphLabelFontTransformer;
import invis.gl.Transformers.NodeLabelTransformer;
import invis.gl.Transformers.VertexStandardShaper;
import invis.gl.Transformers.VertexStepbasedShaper;
import invis.gl.Transformers.edgeStrokePainter;
import invis.gl.dataprocessor.DataParser;
import invis.gl.graphlayouts.DAGTreeLayout_VarY;
import invis.gl.graphlayouts.JungSugiyama;
import invis.gl.graphlayouts.JungSugiyama.Orientation;
import invis.gl.graphlayouts.MinimumSpanningForest2_mwj;
import invis.gl.graphvisualapi.NetworkDisplayApi.DisplayType;
import invis.gl.graphvisualapi.NetworkDisplayApi.EdgeWeightType;
import invis.gl.networkapi.NetworkElementApi;
import invis.gl.networkapi.NetworkVVDisplay;
import invis.gl.networkapi.VisualEditorTopComponentExtension;
import java.awt.Dimension;
import java.awt.geom.Point2D;
import java.util.Collection;
import org.apache.commons.collections15.functors.ConstantTransformer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//invis.gl.visualeditor//VisualEditor//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "VisualEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "invis.gl.visualeditor.VisualEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_VisualEditorAction",
preferredID = "VisualEditorTopComponent")
@Messages(
{
    "CTL_VisualEditorAction=VisualEditor",
    "CTL_VisualEditorTopComponent=VisualEditor Window",
    "HINT_VisualEditorTopComponent=This is a VisualEditor window"
})
public final class VisualEditorTopComponent extends VisualEditorTopComponentExtension
{

    //private NetworkVisualizationViewer mNVV;
    //private DataParser mDataParser;
    private DirectedSparseMultigraph<String, String> mGraph;
    private DisplayType mDisplayTypeFlag;

    public VisualEditorTopComponent()
    {
        mDataParser = Lookup.getDefault().lookup(DataParser.class);
        //mGraph = mDataParser.getGraph();
        initComponents();
        this.setDisplayName("Visual Editor");
        setToolTipText(Bundle.HINT_VisualEditorTopComponent());
        EdgeWidthButtonGroup.add(CaseFrequencyEdgeWithButton);
        EdgeWidthButtonGroup.add(UniqueCaseFrequencyEdgeWithButton);
        EdgeWidthButtonGroup.add(NetworkElementsEdgeWithButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        EdgeWidthButtonGroup = new javax.swing.ButtonGroup();
        jSeparator2 = new javax.swing.JSeparator();
        mHideNodeLabelsButton = new javax.swing.JToggleButton();
        mHideEdgeLabelsButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        GraphLayoutjComboBox1 = new javax.swing.JComboBox<Integer>();
        mNodeLabelFontSize = new javax.swing.JComboBox<Integer>();
        mEdgeLabelFontSize = new javax.swing.JComboBox<Integer>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        mNodeLabelTitleCheckBox = new javax.swing.JCheckBox();
        mNodeLabelStateDescriptionCheckBox = new javax.swing.JCheckBox();
        mNodeLabelClusterIDCheckBox = new javax.swing.JCheckBox();
        mMDPValueCheckBox = new javax.swing.JCheckBox();
        mParametersCheckBox = new javax.swing.JCheckBox();
        mInteractionIndexCheckBox = new javax.swing.JCheckBox();
        mNodeClearAllLabelsButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        mLabelTitleCheckBox = new javax.swing.JCheckBox();
        mActionDescriptionCheckBox = new javax.swing.JCheckBox();
        mCaseFrequencyCheckBox = new javax.swing.JCheckBox();
        mUniqueFrequencyCheckBox = new javax.swing.JCheckBox();
        mBetweennessCheckBox = new javax.swing.JCheckBox();
        mEdgeParametersCheckBox = new javax.swing.JCheckBox();
        mEdgeClearAllLabelsButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        CaseFrequencyEdgeWithButton = new javax.swing.JRadioButton();
        UniqueCaseFrequencyEdgeWithButton = new javax.swing.JRadioButton();
        NetworkElementsEdgeWithButton = new javax.swing.JRadioButton();
        edgeWithNormalizationCheckBox = new javax.swing.JCheckBox();
        AlignXButton = new javax.swing.JButton();
        AlignYButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        mNodeSelectionSizeMultiplier = new javax.swing.JComboBox<Double>();
        jLabel7 = new javax.swing.JLabel();
        mExpandLayoutBtn = new javax.swing.JButton();
        mShrinkLayoutBtn = new javax.swing.JButton();

        setAutoscrolls(true);
        setName("VisualEditorWindow"); // NOI18N

        mHideNodeLabelsButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(mHideNodeLabelsButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mHideNodeLabelsButton.text")); // NOI18N
        mHideNodeLabelsButton.setToolTipText(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mHideNodeLabelsButton.toolTipText")); // NOI18N
        mHideNodeLabelsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mHideNodeLabelsButtonActionPerformed(evt);
            }
        });

        mHideEdgeLabelsButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(mHideEdgeLabelsButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mHideEdgeLabelsButton.text")); // NOI18N
        mHideEdgeLabelsButton.setToolTipText(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mHideEdgeLabelsButton.toolTipText")); // NOI18N
        mHideEdgeLabelsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mHideEdgeLabelsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jLabel2.text")); // NOI18N

        GraphLayoutjComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DAG-Tree-Layout", "KK Layout", "Spring Layout", "ISOM Layout", "FR Layout", "Circle Layout", "Min. Spanning Tree", "Sugiyama" }));
        GraphLayoutjComboBox1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                GraphLayoutjComboBox1ActionPerformed(evt);
            }
        });

        mNodeLabelFontSize.setEditable(true);
        mNodeLabelFontSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38", "40" }));
        mNodeLabelFontSize.setSelectedIndex(4);
        mNodeLabelFontSize.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mNodeLabelFontSizeActionPerformed(evt);
            }
        });

        mEdgeLabelFontSize.setEditable(true);
        mEdgeLabelFontSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38", "40" }));
        mEdgeLabelFontSize.setSelectedIndex(4);
        mEdgeLabelFontSize.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mEdgeLabelFontSizeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jLabel3.text")); // NOI18N

        jTabbedPane1.setToolTipText(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jTabbedPane1.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mNodeLabelTitleCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mNodeLabelTitleCheckBox.text")); // NOI18N
        mNodeLabelTitleCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mNodeLabelTitleCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mNodeLabelStateDescriptionCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mNodeLabelStateDescriptionCheckBox.text")); // NOI18N
        mNodeLabelStateDescriptionCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mNodeLabelStateDescriptionCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mNodeLabelClusterIDCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mNodeLabelClusterIDCheckBox.text")); // NOI18N
        mNodeLabelClusterIDCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mNodeLabelClusterIDCheckBoxActionPerformed(evt);
            }
        });

        mMDPValueCheckBox.setText(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mMDPValueCheckBox.text")); // NOI18N
        mMDPValueCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mMDPValueCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mParametersCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mParametersCheckBox.text")); // NOI18N
        mParametersCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mParametersCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mInteractionIndexCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mInteractionIndexCheckBox.text")); // NOI18N
        mInteractionIndexCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mInteractionIndexCheckBox.toolTipText")); // NOI18N
        mInteractionIndexCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mInteractionIndexCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mNodeClearAllLabelsButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mNodeClearAllLabelsButton.text")); // NOI18N
        mNodeClearAllLabelsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mNodeClearAllLabelsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mInteractionIndexCheckBox)
                    .addComponent(mParametersCheckBox)
                    .addComponent(mMDPValueCheckBox)
                    .addComponent(mNodeLabelClusterIDCheckBox)
                    .addComponent(mNodeLabelStateDescriptionCheckBox)
                    .addComponent(jLabel4)
                    .addComponent(mNodeLabelTitleCheckBox)
                    .addComponent(mNodeClearAllLabelsButton))
                .addContainerGap(7, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mNodeLabelTitleCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mNodeLabelStateDescriptionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mNodeLabelClusterIDCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mMDPValueCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mParametersCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mInteractionIndexCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mNodeClearAllLabelsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mLabelTitleCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mLabelTitleCheckBox.text")); // NOI18N
        mLabelTitleCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mLabelTitleCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mActionDescriptionCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mActionDescriptionCheckBox.text")); // NOI18N
        mActionDescriptionCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mActionDescriptionCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mCaseFrequencyCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mCaseFrequencyCheckBox.text")); // NOI18N
        mCaseFrequencyCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mCaseFrequencyCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mUniqueFrequencyCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mUniqueFrequencyCheckBox.text")); // NOI18N
        mUniqueFrequencyCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mUniqueFrequencyCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mBetweennessCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mBetweennessCheckBox.text")); // NOI18N
        mBetweennessCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mBetweennessCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mEdgeParametersCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mEdgeParametersCheckBox.text")); // NOI18N
        mEdgeParametersCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mEdgeParametersCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mEdgeClearAllLabelsButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mEdgeClearAllLabelsButton.text")); // NOI18N
        mEdgeClearAllLabelsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mEdgeClearAllLabelsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mEdgeParametersCheckBox)
                    .addComponent(mBetweennessCheckBox)
                    .addComponent(mUniqueFrequencyCheckBox)
                    .addComponent(mCaseFrequencyCheckBox)
                    .addComponent(mActionDescriptionCheckBox)
                    .addComponent(jLabel5)
                    .addComponent(mLabelTitleCheckBox)
                    .addComponent(mEdgeClearAllLabelsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mLabelTitleCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mActionDescriptionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mCaseFrequencyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mUniqueFrequencyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mBetweennessCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mEdgeParametersCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mEdgeClearAllLabelsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jLabel6.text")); // NOI18N

        EdgeWidthButtonGroup.add(CaseFrequencyEdgeWithButton);
        CaseFrequencyEdgeWithButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(CaseFrequencyEdgeWithButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.CaseFrequencyEdgeWithButton.text")); // NOI18N
        CaseFrequencyEdgeWithButton.setToolTipText(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.CaseFrequencyEdgeWithButton.toolTipText")); // NOI18N
        CaseFrequencyEdgeWithButton.setActionCommand(org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.CaseFrequencyEdgeWithButton.actionCommand")); // NOI18N
        CaseFrequencyEdgeWithButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CaseFrequencyEdgeWithButtonActionPerformed(evt);
            }
        });

        EdgeWidthButtonGroup.add(UniqueCaseFrequencyEdgeWithButton);
        org.openide.awt.Mnemonics.setLocalizedText(UniqueCaseFrequencyEdgeWithButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.UniqueCaseFrequencyEdgeWithButton.text")); // NOI18N
        UniqueCaseFrequencyEdgeWithButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                UniqueCaseFrequencyEdgeWithButtonActionPerformed(evt);
            }
        });

        EdgeWidthButtonGroup.add(NetworkElementsEdgeWithButton);
        org.openide.awt.Mnemonics.setLocalizedText(NetworkElementsEdgeWithButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.NetworkElementsEdgeWithButton.text")); // NOI18N
        NetworkElementsEdgeWithButton.setEnabled(false);
        NetworkElementsEdgeWithButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                NetworkElementsEdgeWithButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(edgeWithNormalizationCheckBox, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.edgeWithNormalizationCheckBox.text")); // NOI18N
        edgeWithNormalizationCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                edgeWithNormalizationCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(AlignXButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.AlignXButton.text")); // NOI18N
        AlignXButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AlignXButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(AlignYButton, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.AlignYButton.text")); // NOI18N
        AlignYButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AlignYButtonActionPerformed(evt);
            }
        });

        mNodeSelectionSizeMultiplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1.0", "1.1", "1.25", "1.5", "1.75", "2.0", "2.5", "3.0", "4.0" }));
        mNodeSelectionSizeMultiplier.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mNodeSelectionSizeMultiplierActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.jLabel7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mExpandLayoutBtn, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mExpandLayoutBtn.text")); // NOI18N
        mExpandLayoutBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mExpandLayoutBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mShrinkLayoutBtn, org.openide.util.NbBundle.getMessage(VisualEditorTopComponent.class, "VisualEditorTopComponent.mShrinkLayoutBtn.text")); // NOI18N
        mShrinkLayoutBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mShrinkLayoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edgeWithNormalizationCheckBox)
                            .addComponent(NetworkElementsEdgeWithButton)
                            .addComponent(UniqueCaseFrequencyEdgeWithButton)
                            .addComponent(CaseFrequencyEdgeWithButton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(mHideEdgeLabelsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mHideNodeLabelsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mEdgeLabelFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mNodeLabelFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel6)
                            .addComponent(jLabel2)
                            .addComponent(GraphLayoutjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(mExpandLayoutBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mShrinkLayoutBtn)))
                        .addContainerGap(6, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AlignXButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AlignYButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mNodeSelectionSizeMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mHideNodeLabelsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mHideEdgeLabelsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mNodeLabelFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mEdgeLabelFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CaseFrequencyEdgeWithButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UniqueCaseFrequencyEdgeWithButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NetworkElementsEdgeWithButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edgeWithNormalizationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GraphLayoutjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mExpandLayoutBtn)
                    .addComponent(mShrinkLayoutBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlignXButton)
                    .addComponent(AlignYButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(mNodeSelectionSizeMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mHideNodeLabelsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mHideNodeLabelsButtonActionPerformed
    {//GEN-HEADEREND:event_mHideNodeLabelsButtonActionPerformed
        if (mNVV != null)
        {
            {
                mNVV.setHideNetworkLabels(mHideNodeLabelsButton.isSelected(), NetworkElementApi.NetworkElementType.NODE);
            }
        }
    }//GEN-LAST:event_mHideNodeLabelsButtonActionPerformed

    private void mHideEdgeLabelsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mHideEdgeLabelsButtonActionPerformed
    {//GEN-HEADEREND:event_mHideEdgeLabelsButtonActionPerformed
        if (mNVV != null)
        {
            {
                mNVV.setHideNetworkLabels(mHideEdgeLabelsButton.isSelected(), NetworkElementApi.NetworkElementType.EDGE);
            }
        }
    }//GEN-LAST:event_mHideEdgeLabelsButtonActionPerformed

    private void GraphLayoutjComboBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_GraphLayoutjComboBox1ActionPerformed
    {//GEN-HEADEREND:event_GraphLayoutjComboBox1ActionPerformed
        int val = GraphLayoutjComboBox1.getSelectedIndex();


        if (mNVV != null)
        {
            //mNVV.getGraphLayout().setSize(new Dimension((int) Math.ceil(Math.sqrt((double) mGraph.getVertexCount()) * 350), (int) Math.ceil(Math.sqrt((double) mGraph.getVertexCount())) * 350));
            switch (val)
            {
                case 0:
                    mShrinkLayoutBtn.setEnabled(false);
                    mExpandLayoutBtn.setEnabled(false);
                    mNVV.setGraphLayout(new DAGTreeLayout_VarY<String, String>(mGraph));
                    break;
                case 1:
                    mShrinkLayoutBtn.setEnabled(false);
                    mExpandLayoutBtn.setEnabled(false);
                    KKLayout<String, String> KKlayout = new KKLayout<String, String>(mGraph);
                    KKlayout.setMaxIterations(100);
                    mNVV.setGraphLayout(KKlayout);
                    break;
                case 2:
                    mShrinkLayoutBtn.setEnabled(true);
                    mExpandLayoutBtn.setEnabled(true);
                    SpringLayout<String, String> Slayout = new SpringLayout<String, String>(mGraph);
                    //These values seem pretty good.
                    Slayout.setStretch(0.1);
                    Slayout.setForceMultiplier(10.0);
                    Slayout.setRepulsionRange(200);
                    mNVV.setGraphLayout(Slayout);
                    break;
                case 3:
                    mShrinkLayoutBtn.setEnabled(false);
                    mExpandLayoutBtn.setEnabled(false);
                    ISOMLayout<String, String> Isomlayout = new ISOMLayout<String, String>(mGraph);
                    mNVV.setGraphLayout(Isomlayout);
                    break;
                case 4:
                    mShrinkLayoutBtn.setEnabled(true);
                    mExpandLayoutBtn.setEnabled(true);
                    FRLayout<String, String> FRlayout = new FRLayout<String, String>(mGraph);
                    FRlayout.setMaxIterations(100);
                    mNVV.setGraphLayout(FRlayout);
                    break;
                case 5:
                    mShrinkLayoutBtn.setEnabled(true);
                    mExpandLayoutBtn.setEnabled(true);
                    CircleLayout<String, String> circleLayout = new CircleLayout<String, String>(mGraph);
                    mNVV.setGraphLayout(circleLayout);
                    break;
                case 6:
                    mShrinkLayoutBtn.setEnabled(false);
                    mExpandLayoutBtn.setEnabled(false);
                    String root;
                    //If there is a picked vertex.
                    if (mNVV.getPickedVertexState().getPicked().size() > 0)
                    {
                        //We set it as the optional root for the minimum spanning tree layout.
                        root = mNVV.getPickedVertexState().getPicked().toArray()[0].toString();
                    } else
                    {
                        //if there is not a selected vertex the root will be null, and "prim" below will select a root at random.
                        root = null;
                    }
                    MinimumSpanningForest2_mwj<String, String> prim = new MinimumSpanningForest2_mwj<String, String>(mGraph,
                            new DelegateForest<String, String>(),
                            DelegateTree.<String, String>getFactory(),
                            new ConstantTransformer(1.0),
                            root);

                    Forest<String, String> tree = prim.getForest();
                    Layout<String, String> layout1 = new TreeLayout<String, String>(tree, 250, 200);
                    Layout<String, String> layout2 = new StaticLayout<String, String>(mGraph, layout1);
                    mNVV.setGraphLayout(layout2);
                    break;
                case 7:
                    mNVV.setGraphLayout(new JungSugiyama<String, String>(mGraph, Orientation.TOP, 200, 300));
                    break;
                //case 8:
                //DAGLayout<String, String> layout = new DAGLayout<String, String>(mGraph);
                //Dimension size = mNVV.getModel().getGraphLayout().getSize();

                //layout.setSize(size);
                //layout.setForceMultiplier(10.0);
                //layout.setRepulsionRange(200);
                //mNVV.setGraphLayout(layout);
                //break;
                default:
                    try
                    {
                        throw (new Exception("Un-reachable graph layout chosenn from graph layout combob box."));
                    } catch (Exception ex)
                    {
                        Exceptions.printStackTrace(ex);
                    }
                    break;
            }
        }
    }//GEN-LAST:event_GraphLayoutjComboBox1ActionPerformed

    private void mNodeLabelFontSizeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mNodeLabelFontSizeActionPerformed
    {//GEN-HEADEREND:event_mNodeLabelFontSizeActionPerformed
        String input = mNodeLabelFontSize.getSelectedItem().toString();
        //mNVV = ((NetworkDisplayApi) WindowManager.getDefault().findTopComponent("NetworkDisplayTopComponent")).getvv;
        int fontSize = this.CheckFontSize(input);
        ((NetworkElementGraphLabelFontTransformer) mNVV.getRenderContext().getVertexFontTransformer()).SetFontSize(fontSize);
        UpdateEdgeLabels();
        UpdateNodeLabels();
        mNVV.repaint();
        //mNVV.RefreshVisualizationViewer();
    }//GEN-LAST:event_mNodeLabelFontSizeActionPerformed

    private void mEdgeLabelFontSizeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mEdgeLabelFontSizeActionPerformed
    {//GEN-HEADEREND:event_mEdgeLabelFontSizeActionPerformed
        String input = mEdgeLabelFontSize.getSelectedItem().toString();
        //mNDTC = (NetworkDisplayApi) WindowManager.getDefault().findTopComponent("NetworkDisplayTopComponent");
        int fontSize = this.CheckFontSize(input);
        ((NetworkElementGraphLabelFontTransformer) mNVV.getRenderContext().getEdgeFontTransformer()).SetFontSize(fontSize);
        UpdateEdgeLabels();
        UpdateNodeLabels();
        mNVV.repaint();

        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mEdgeLabelFontSizeActionPerformed

    private void mNodeLabelStateDescriptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mNodeLabelStateDescriptionCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mNodeLabelStateDescriptionCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setStateDescriptionFlag(mNodeLabelStateDescriptionCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mNodeLabelStateDescriptionCheckBoxActionPerformed

    private void mNodeLabelClusterIDCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mNodeLabelClusterIDCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mNodeLabelClusterIDCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setClusterIDFlag(mNodeLabelClusterIDCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mNodeLabelClusterIDCheckBoxActionPerformed

    private void mMDPValueCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mMDPValueCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mMDPValueCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((NodeLabelTransformer)mNVV.getRenderContext().getVertexLabelTransformer()).setMDPValueFlag(mMDPValueCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mMDPValueCheckBoxActionPerformed

    private void mParametersCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mParametersCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mParametersCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setParametersFlag(mParametersCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mParametersCheckBoxActionPerformed

    private void mNodeLabelTitleCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mNodeLabelTitleCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mNodeLabelTitleCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setLabelTitleFlag(mNodeLabelTitleCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mNodeLabelTitleCheckBoxActionPerformed

    private void mLabelTitleCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mLabelTitleCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mLabelTitleCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setLabelTitle(mLabelTitleCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mLabelTitleCheckBoxActionPerformed

    private void mActionDescriptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mActionDescriptionCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mActionDescriptionCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setActionDescriptionFlag(mActionDescriptionCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mActionDescriptionCheckBoxActionPerformed

    private void mCaseFrequencyCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mCaseFrequencyCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mCaseFrequencyCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setFrequencyFlag(mCaseFrequencyCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mCaseFrequencyCheckBoxActionPerformed

    private void mUniqueFrequencyCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mUniqueFrequencyCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mUniqueFrequencyCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setUniqueFrequencyFlag(mUniqueFrequencyCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mUniqueFrequencyCheckBoxActionPerformed

    private void mBetweennessCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mBetweennessCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mBetweennessCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setBetweennessFlag(mBetweennessCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mBetweennessCheckBoxActionPerformed

    private void mInteractionIndexCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mInteractionIndexCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mInteractionIndexCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setInteractionIndexFlag(mInteractionIndexCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mInteractionIndexCheckBoxActionPerformed

    private void mEdgeParametersCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mEdgeParametersCheckBoxActionPerformed
    {//GEN-HEADEREND:event_mEdgeParametersCheckBoxActionPerformed
        this.UpdateLabelCheckBoxes();
        //((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setParametersFlag(mEdgeParametersCheckBox.isSelected());
        //mNVV.repaint();
        //mNDTC.RefreshVisualizationViewer();
    }//GEN-LAST:event_mEdgeParametersCheckBoxActionPerformed

    private void mEdgeClearAllLabelsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mEdgeClearAllLabelsButtonActionPerformed
    {//GEN-HEADEREND:event_mEdgeClearAllLabelsButtonActionPerformed
        mActionDescriptionCheckBox.setSelected(false);
        mLabelTitleCheckBox.setSelected(false);
        mCaseFrequencyCheckBox.setSelected(false);
        mUniqueFrequencyCheckBox.setSelected(false);
        mBetweennessCheckBox.setSelected(false);
        mEdgeParametersCheckBox.setSelected(false);
        UpdateLabelCheckBoxes();
    }//GEN-LAST:event_mEdgeClearAllLabelsButtonActionPerformed

    private void mNodeClearAllLabelsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mNodeClearAllLabelsButtonActionPerformed
    {//GEN-HEADEREND:event_mNodeClearAllLabelsButtonActionPerformed
        mNodeLabelStateDescriptionCheckBox.setSelected(false);
        mNodeLabelClusterIDCheckBox.setSelected(false);
        mMDPValueCheckBox.setSelected(false);
        mParametersCheckBox.setSelected(false);
        mNodeLabelTitleCheckBox.setSelected(false);
        mInteractionIndexCheckBox.setSelected(false);
        UpdateLabelCheckBoxes();
    }//GEN-LAST:event_mNodeClearAllLabelsButtonActionPerformed

    private void CaseFrequencyEdgeWithButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CaseFrequencyEdgeWithButtonActionPerformed
    {//GEN-HEADEREND:event_CaseFrequencyEdgeWithButtonActionPerformed
        ((edgeStrokePainter) (mNVV.getRenderContext().getEdgeStrokeTransformer())).setActiveEdgeWeightMap(EdgeWeightType.CASEFREQUENCY);
        mNVV.repaint();
    }//GEN-LAST:event_CaseFrequencyEdgeWithButtonActionPerformed

    private void UniqueCaseFrequencyEdgeWithButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_UniqueCaseFrequencyEdgeWithButtonActionPerformed
    {//GEN-HEADEREND:event_UniqueCaseFrequencyEdgeWithButtonActionPerformed
        ((edgeStrokePainter) (mNVV.getRenderContext().getEdgeStrokeTransformer())).setActiveEdgeWeightMap(EdgeWeightType.UNIQUECASEFREQUENCY);
        mNVV.repaint();
    }//GEN-LAST:event_UniqueCaseFrequencyEdgeWithButtonActionPerformed

    private void NetworkElementsEdgeWithButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_NetworkElementsEdgeWithButtonActionPerformed
    {//GEN-HEADEREND:event_NetworkElementsEdgeWithButtonActionPerformed
        ((edgeStrokePainter) (mNVV.getRenderContext().getEdgeStrokeTransformer())).setActiveEdgeWeightMap(EdgeWeightType.NETWORKELEMENTS);
        mNVV.repaint();
    }//GEN-LAST:event_NetworkElementsEdgeWithButtonActionPerformed

    private void edgeWithNormalizationCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_edgeWithNormalizationCheckBoxActionPerformed
    {//GEN-HEADEREND:event_edgeWithNormalizationCheckBoxActionPerformed
        ((edgeStrokePainter) (mNVV.getRenderContext().getEdgeStrokeTransformer())).setNormalized(edgeWithNormalizationCheckBox.isSelected());
        mNVV.repaint();
    }//GEN-LAST:event_edgeWithNormalizationCheckBoxActionPerformed

    private void AlignXButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AlignXButtonActionPerformed
    {//GEN-HEADEREND:event_AlignXButtonActionPerformed
        double AvgYPosition = 0;
        Layout currentLayout = (Layout) mNVV.getGraphLayout();
        for (int i = 0; i < mNVV.getPickedVertexState().getPicked().size(); i++)
        {
            AvgYPosition += ((Point2D) currentLayout.transform(mNVV.getPickedVertexState().getPicked().toArray()[i])).getY();
        }
        AvgYPosition /= mNVV.getPickedVertexState().getPicked().size();

        for (int i = 0; i < mNVV.getPickedVertexState().getPicked().size(); i++)
        {
            Double currX = ((Point2D) currentLayout.transform(mNVV.getPickedVertexState().getPicked().toArray()[i])).getX();
            mNVV.getGraphLayout().setLocation(
                    mNVV.getPickedVertexState().getPicked().toArray()[i].toString(),
                    new Point2D.Double(currX, AvgYPosition));
        }
    }//GEN-LAST:event_AlignXButtonActionPerformed

    private void AlignYButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AlignYButtonActionPerformed
    {//GEN-HEADEREND:event_AlignYButtonActionPerformed
        double AvgXPosition = 0;
        Layout currentLayout = (Layout) mNVV.getGraphLayout();
        for (int i = 0; i < mNVV.getPickedVertexState().getPicked().size(); i++)
        {
            AvgXPosition += ((Point2D) currentLayout.transform(mNVV.getPickedVertexState().getPicked().toArray()[i])).getX();
        }
        AvgXPosition /= mNVV.getPickedVertexState().getPicked().size();

        for (int i = 0; i < mNVV.getPickedVertexState().getPicked().size(); i++)
        {
            Double currY = ((Point2D) currentLayout.transform(mNVV.getPickedVertexState().getPicked().toArray()[i])).getY();
            mNVV.getGraphLayout().setLocation(
                    mNVV.getPickedVertexState().getPicked().toArray()[i].toString(),
                    new Point2D.Double(AvgXPosition, currY));
        }
    }//GEN-LAST:event_AlignYButtonActionPerformed

    private void mNodeSelectionSizeMultiplierActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mNodeSelectionSizeMultiplierActionPerformed
    {//GEN-HEADEREND:event_mNodeSelectionSizeMultiplierActionPerformed

        if (mDisplayTypeFlag == DisplayType.NETWORK)
        {
            ((VertexStandardShaper) (mNVV.getRenderContext().getVertexShapeTransformer())).UpdateSizeMultiplier(
                    Double.valueOf(mNodeSelectionSizeMultiplier.getSelectedItem().toString()));
        }
        if (mDisplayTypeFlag == DisplayType.STEPBASED)
        {
            //mNVV.getRenderContext().setVertexShapeTransformer(new VertexStepbasedShaper(mDataParser.getDerivedData().getNodeTable()));
            ((VertexStepbasedShaper) (mNVV.getRenderContext().getVertexShapeTransformer())).UpdateSizeMultiplier(
                    Double.valueOf(mNodeSelectionSizeMultiplier.getSelectedItem().toString()));

///                    .UpdateVertexFrequencyMap(mNVV.buildUniqueCaseFrequencyVertexWeightMap());
            //((VertexStepbasedShaper) (mNVV.getRenderContext().getVertexShapeTransformer())).UpdateSizeMultiplier(
            //mNodeSelectionSizeMultiplier.getItemAt(mNodeSelectionSizeMultiplier.getSelectedIndex()));
            //Double.valueOf(mNodeSelectionSizeMultiplier.getSelectedItem().toString()));
        }

        mNVV.repaint();
    }//GEN-LAST:event_mNodeSelectionSizeMultiplierActionPerformed

    private void mExpandLayoutBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mExpandLayoutBtnActionPerformed
    {//GEN-HEADEREND:event_mExpandLayoutBtnActionPerformed
        if (GraphLayoutjComboBox1.getSelectedIndex() == 5) //Circle Layout
        {
            CircleLayout<String, String> circleLayout = new CircleLayout<String, String>(mGraph);
            Dimension size = mNVV.getModel().getGraphLayout().getSize();
            size.setSize(size.width * 1.25, size.height * 1.25);
            mNVV.getModel().setGraphLayout(circleLayout, size);
        }

        if (GraphLayoutjComboBox1.getSelectedIndex() == 4)
        {
            FRLayout<String, String> FRlayout = new FRLayout<String, String>(mGraph);
            FRlayout.setMaxIterations(500);

            //Get the model's (the layout's) dimensions.
            Dimension size = mNVV.getModel().getGraphLayout().getSize();
            // Grow the size of the layout by 25%.
            size.setSize(size.width * 1.25, size.height * 1.25);

            mNVV.getModel().setGraphLayout(FRlayout, size);
            //mNVV.setGraphLayout(FRlayout);
        }
        if (GraphLayoutjComboBox1.getSelectedIndex() == 2) //Spring Layout
        {
            SpringLayout<String, String> Slayout = new SpringLayout<String, String>(mGraph);
            Dimension size = mNVV.getModel().getGraphLayout().getSize();
            // Grow the size of the layout by 25%.
            size.setSize(size.width * 1.25, size.height * 1.25);
            mNVV.getModel().setGraphLayout(Slayout, size);
        }

    }//GEN-LAST:event_mExpandLayoutBtnActionPerformed

    private void mShrinkLayoutBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mShrinkLayoutBtnActionPerformed
    {//GEN-HEADEREND:event_mShrinkLayoutBtnActionPerformed
        if (GraphLayoutjComboBox1.getSelectedIndex() == 5) //Circle Layout
        {
            CircleLayout<String, String> circleLayout = new CircleLayout<String, String>(mGraph);
            Dimension size = mNVV.getModel().getGraphLayout().getSize();
            size.setSize(size.width * 0.75, size.height * 0.75);
            mNVV.getModel().setGraphLayout(circleLayout, size);
        }

        if (GraphLayoutjComboBox1.getSelectedIndex() == 4)
        {
            FRLayout<String, String> FRlayout = new FRLayout<String, String>(mGraph);
            FRlayout.setMaxIterations(500);

            //Get the model's (the layouts) dimensions.
            Dimension size = mNVV.getModel().getGraphLayout().getSize();
            // Shrink the size by 25%.
            size.setSize(size.width * 0.75, size.height * 0.75);
            // Assign the layout back to the model.
            mNVV.getModel().setGraphLayout(FRlayout, size);
            //mNVV.setGraphLayout(FRlayout);
        }
        if (GraphLayoutjComboBox1.getSelectedIndex() == 2) //Spring Layout
        {
            SpringLayout<String, String> Slayout = new SpringLayout<String, String>(mGraph);
            Dimension size = mNVV.getModel().getGraphLayout().getSize();
            // Grow the size of the layout by 25%.
            size.setSize(size.width * 0.75, size.height * 0.75);
            mNVV.getModel().setGraphLayout(Slayout, size);
        }

    }//GEN-LAST:event_mShrinkLayoutBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AlignXButton;
    private javax.swing.JButton AlignYButton;
    private javax.swing.JRadioButton CaseFrequencyEdgeWithButton;
    private javax.swing.ButtonGroup EdgeWidthButtonGroup;
    private javax.swing.JComboBox<Integer> GraphLayoutjComboBox1;
    private javax.swing.JRadioButton NetworkElementsEdgeWithButton;
    private javax.swing.JRadioButton UniqueCaseFrequencyEdgeWithButton;
    private javax.swing.JCheckBox edgeWithNormalizationCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox mActionDescriptionCheckBox;
    private javax.swing.JCheckBox mBetweennessCheckBox;
    private javax.swing.JCheckBox mCaseFrequencyCheckBox;
    private javax.swing.JButton mEdgeClearAllLabelsButton;
    private javax.swing.JComboBox<Integer> mEdgeLabelFontSize;
    private javax.swing.JCheckBox mEdgeParametersCheckBox;
    private javax.swing.JButton mExpandLayoutBtn;
    private javax.swing.JToggleButton mHideEdgeLabelsButton;
    private javax.swing.JToggleButton mHideNodeLabelsButton;
    private javax.swing.JCheckBox mInteractionIndexCheckBox;
    private javax.swing.JCheckBox mLabelTitleCheckBox;
    private javax.swing.JCheckBox mMDPValueCheckBox;
    private javax.swing.JButton mNodeClearAllLabelsButton;
    private javax.swing.JCheckBox mNodeLabelClusterIDCheckBox;
    private javax.swing.JComboBox<Integer> mNodeLabelFontSize;
    private javax.swing.JCheckBox mNodeLabelStateDescriptionCheckBox;
    private javax.swing.JCheckBox mNodeLabelTitleCheckBox;
    private javax.swing.JComboBox<Double> mNodeSelectionSizeMultiplier;
    private javax.swing.JCheckBox mParametersCheckBox;
    private javax.swing.JButton mShrinkLayoutBtn;
    private javax.swing.JCheckBox mUniqueFrequencyCheckBox;
    // End of variables declaration//GEN-END:variables

    private int CheckFontSize(String input)
    {
        Integer inputInteger = Integer.parseInt(input);
        if (inputInteger < 10)
        {
            return (10);
        }
        if (inputInteger > 50)
        {
            return (50);
        }
        return (inputInteger);
    }

    private void UpdateLabelCheckBoxes()
    {
        if (mDisplayTypeFlag == DisplayType.NETWORK)
        {
            UpdateEdgeLabels();
            UpdateNodeLabels();
        }
        if (mDisplayTypeFlag == DisplayType.STEPBASED)
        {
        }
        if (mNVV != null)
        {
            mNVV.repaint();
        }
    }

    private void UpdateNodeLabels()
    {
        ((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setStateDescriptionFlag(mNodeLabelStateDescriptionCheckBox.isSelected());
        ((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setClusterIDFlag(mNodeLabelClusterIDCheckBox.isSelected());
        ((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setMDPValueFlag(mMDPValueCheckBox.isSelected());
        ((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setParametersFlag(mParametersCheckBox.isSelected());
        ((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setLabelTitleFlag(mNodeLabelTitleCheckBox.isSelected());
        ((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).setInteractionIndexFlag(mInteractionIndexCheckBox.isSelected());

        Collection<String> vertices = mNVV.getGraphLayout().getGraph().getVertices();
        for (int i = 0; i < vertices.size(); i++)
        {
            String key = vertices.toArray()[i].toString();
            String transform = (String) ((NodeLabelTransformer) mNVV.getRenderContext().getVertexLabelTransformer()).transform(key);
            mDataParser.getNodeTable().get(key).setElementLabel(transform);
        }
    }

    private void UpdateEdgeLabels()
    {
        ((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setLabelTitle(mLabelTitleCheckBox.isSelected());
        ((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setActionDescriptionFlag(mActionDescriptionCheckBox.isSelected());
        ((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setFrequencyFlag(mCaseFrequencyCheckBox.isSelected());
        ((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setUniqueFrequencyFlag(mUniqueFrequencyCheckBox.isSelected());
        ((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setBetweennessFlag(mBetweennessCheckBox.isSelected());
        ((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).setParametersFlag(mEdgeParametersCheckBox.isSelected());

        Collection<String> edges = mNVV.getGraphLayout().getGraph().getEdges();
        for (int i = 0; i < edges.size(); i++)
        {
            String key = edges.toArray()[i].toString();
            String transform = (String) ((EdgeLabelTransformer) mNVV.getRenderContext().getEdgeLabelTransformer()).transform(key);
            mDataParser.getEdgeTable().get(key).setElementLabel(transform);
        }

    }

    @Override
    public void UpdateCurrentVV(NetworkVisualizationViewer newVV, DisplayType type)
    {
        if (mDataParser.hasData())
        {
            mNVV = newVV;
            mDisplayTypeFlag = type;
            mGraph = (DirectedSparseMultigraph<String, String>) mNVV.getGraphLayout().getGraph();
            if (type == DisplayType.STEPBASED)
            {
                NetworkElementsEdgeWithButton.setEnabled(true);
            } else
            {
                NetworkElementsEdgeWithButton.setEnabled(false);
            }
        } else
        {
            this.close();
        }
    }

    @Override
    public void ClearContents()
    {
        //mNDTC = null;
        mNVV = null;
        mDataParser = null;
        mGraph = null;
        mActionDescriptionCheckBox.setSelected(true);
        mBetweennessCheckBox.setSelected(true);
        mEdgeParametersCheckBox.setSelected(true);
        mInteractionIndexCheckBox.setSelected(true);
        mLabelTitleCheckBox.setSelected(true);
        mMDPValueCheckBox.setSelected(true);
        mNodeLabelClusterIDCheckBox.setSelected(true);
        mNodeLabelStateDescriptionCheckBox.setSelected(true);
        mNodeLabelTitleCheckBox.setSelected(true);
        mParametersCheckBox.setSelected(true);
        mUniqueFrequencyCheckBox.setSelected(true);
        this.repaint();
    }

    @Override
    public void componentOpened()
    {
        mDataParser = Lookup.getDefault().lookup(DataParser.class);
        ((NetworkVVDisplay) (WindowManager.getDefault().findTopComponent("NetworkDisplayTopComponent"))).RebroadcastNetworkVisualizationViewer();
        if (mDataParser != null && mDataParser.hasData())
        {
            //mGraph = mDataParser.getGraph();
            //initComponents();
            this.UpdateLabelCheckBoxes();
        }
    }

    @Override
    public void componentClosed()
    {
        mNVV = null;
        mDataParser = null;
        mGraph = null;
        mDisplayTypeFlag = null;
    }

    void writeProperties(java.util.Properties p)
    {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
    }

    /*@Override
    public void RefreshContents()
    {
        throw new UnsupportedOperationException("The Visual Editor Top Componenet has not to refresh. This function was incorrectly called.");
    }*/
}
