package invis.gl.visualeditor;

import GuiElements.RangeSlider;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.visualization.subLayout.GraphCollapser;
import invis.gl.NetworkStatistics.NetworkStatisticsPanel;
import invis.gl.NetworkVisualizationViewer.NetworkVisualizationViewer;
import invis.gl.Transformers.NetworkElementGraphLabelFontTransformer;
import invis.gl.Transformers.StepbasedEdgePainter;
import invis.gl.Transformers.edgePainter;
import invis.gl.Transformers.stepBasedVertexPainter;
import invis.gl.Transformers.vertexPainter;
import invis.gl.dataprocessor.DataParser;
import invis.gl.graphviewer.NetworkDisplayTopComponent;
import invis.gl.graphviewer.StepBasedDisplayTopComponent;
import invis.gl.graphvisualapi.NetworkDisplayApi.DisplayType;
import invis.gl.networkapi.EdgeBetweennessClusterer_mwj;
import invis.gl.networkapi.NetworkElementApi;
import invis.gl.networkapi.NetworkElementApi.NetworkElementType;
import invis.gl.networkapi.NetworkVVDisplay;
import invis.gl.networkapi.VisualEditorTopComponentExtension;
import java.awt.Dialog;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//invis.gl.visualeditor//NetworkEditor//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "NetworkEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "invis.gl.visualeditor.NetworkEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_NetworkEditorAction",
preferredID = "NetworkEditorTopComponent")
@Messages(
{
    "CTL_NetworkEditorAction=NetworkEditor",
    "CTL_NetworkEditorTopComponent=Network Editor",
    "HINT_NetworkEditorTopComponent=This is a Network Editor window"
})
public final class NetworkEditorTopComponent extends VisualEditorTopComponentExtension
{

    private DisplayType mDisplayTypeFlag;
    private DirectedSparseMultigraph<String, String> mGraph;
    //protected GraphCollapser collapser;

    public NetworkEditorTopComponent()
    {
        mDataParser = Lookup.getDefault().lookup(DataParser.class);
        //mGraph = mDataParser.getGraph();
        initComponents();
        setName(Bundle.CTL_NetworkEditorTopComponent());
        setToolTipText(Bundle.HINT_NetworkEditorTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mSuccessorsButton = new javax.swing.JButton();
        mPredecessorButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        StatisticsButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        EdgeFrequencyFilterjLabel = new javax.swing.JLabel();
        NodeFrequencyFilterjLabel = new javax.swing.JLabel();
        edgeFrequencySlider = new GuiElements.RangeSlider();
        nodeFrequencySlider = new GuiElements.RangeSlider();
        mCollapseButton = new javax.swing.JButton();
        mExpandGroupButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        mFrequencyRemovalBtn = new javax.swing.JButton();
        mEdgeSearchButton = new javax.swing.JButton();
        mVertexSearchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        mVertexSearchTextArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        mEdgeSearchTextArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        LoopRemovaljButton = new javax.swing.JButton();
        RemoveDeleteActionButton = new javax.swing.JButton();
        mCommunityBtn = new javax.swing.JButton();
        mGenerateBtn = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(mSuccessorsButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mSuccessorsButton.text")); // NOI18N
        mSuccessorsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mSuccessorsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mPredecessorButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mPredecessorButton.text")); // NOI18N
        mPredecessorButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mPredecessorButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(StatisticsButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.StatisticsButton.text")); // NOI18N
        StatisticsButton.setActionCommand(org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.StatisticsButton.actionCommand")); // NOI18N
        StatisticsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                StatisticsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(EdgeFrequencyFilterjLabel, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.EdgeFrequencyFilterjLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(NodeFrequencyFilterjLabel, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.NodeFrequencyFilterjLabel.text")); // NOI18N
        NodeFrequencyFilterjLabel.setToolTipText(org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.NodeFrequencyFilterjLabel.toolTipText")); // NOI18N

        edgeFrequencySlider.setPaintLabels(true);
        edgeFrequencySlider.setPaintTicks(true);
        edgeFrequencySlider.setValue(0);
        edgeFrequencySlider.setUpperValue(100);

        nodeFrequencySlider.setPaintLabels(true);
        nodeFrequencySlider.setPaintTicks(true);
        nodeFrequencySlider.setValue(0);
        nodeFrequencySlider.setUpperValue(100);

        org.openide.awt.Mnemonics.setLocalizedText(mCollapseButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mCollapseButton.text")); // NOI18N
        mCollapseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mCollapseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mExpandGroupButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mExpandGroupButton.text")); // NOI18N
        mExpandGroupButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mExpandGroupButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(mFrequencyRemovalBtn, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mFrequencyRemovalBtn.text")); // NOI18N
        mFrequencyRemovalBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mFrequencyRemovalBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mEdgeSearchButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mEdgeSearchButton.text")); // NOI18N
        mEdgeSearchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mEdgeSearchButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mVertexSearchButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mVertexSearchButton.text")); // NOI18N
        mVertexSearchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mVertexSearchButtonActionPerformed(evt);
            }
        });

        mVertexSearchTextArea.setColumns(20);
        mVertexSearchTextArea.setRows(5);
        jScrollPane2.setViewportView(mVertexSearchTextArea);

        mEdgeSearchTextArea.setColumns(20);
        mEdgeSearchTextArea.setRows(5);
        mEdgeSearchTextArea.setText(org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mEdgeSearchTextArea.text")); // NOI18N
        mEdgeSearchTextArea.setToolTipText(org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mEdgeSearchTextArea.toolTipText")); // NOI18N
        mEdgeSearchTextArea.setPreferredSize(new java.awt.Dimension(164, 40));
        jScrollPane1.setViewportView(mEdgeSearchTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(LoopRemovaljButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.LoopRemovaljButton.text")); // NOI18N
        LoopRemovaljButton.setToolTipText(org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.LoopRemovaljButton.toolTipText")); // NOI18N
        LoopRemovaljButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LoopRemovaljButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(RemoveDeleteActionButton, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.RemoveDeleteActionButton.text")); // NOI18N
        RemoveDeleteActionButton.setToolTipText(org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.RemoveDeleteActionButton.toolTipText")); // NOI18N
        RemoveDeleteActionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RemoveDeleteActionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mCommunityBtn, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mCommunityBtn.text")); // NOI18N
        mCommunityBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mCommunityBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(mGenerateBtn, org.openide.util.NbBundle.getMessage(NetworkEditorTopComponent.class, "NetworkEditorTopComponent.mGenerateBtn.text")); // NOI18N
        mGenerateBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mGenerateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mPredecessorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mCollapseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mSuccessorsButton)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(mExpandGroupButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StatisticsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mCommunityBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mGenerateBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mEdgeSearchButton)
                            .addComponent(mVertexSearchButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NodeFrequencyFilterjLabel)
                            .addComponent(EdgeFrequencyFilterjLabel)
                            .addComponent(mFrequencyRemovalBtn)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LoopRemovaljButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RemoveDeleteActionButton))
                            .addComponent(edgeFrequencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nodeFrequencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addComponent(jSeparator3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mSuccessorsButton)
                    .addComponent(mExpandGroupButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mCollapseButton)
                    .addComponent(mPredecessorButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StatisticsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mCommunityBtn)
                    .addComponent(mGenerateBtn))
                .addGap(21, 21, 21)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NodeFrequencyFilterjLabel))
                    .addComponent(nodeFrequencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EdgeFrequencyFilterjLabel)
                    .addComponent(edgeFrequencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LoopRemovaljButton)
                        .addComponent(RemoveDeleteActionButton))
                    .addComponent(mFrequencyRemovalBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mVertexSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mEdgeSearchButton)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void StatisticsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_StatisticsButtonActionPerformed
    {//GEN-HEADEREND:event_StatisticsButtonActionPerformed
        //new NetworkStatistics().actionPerformed(evt);
        DialogDescriptor dg = new DialogDescriptor(new NetworkStatisticsPanel(mDataParser, mGraph), "Statistics Window");
        Dialog dd = DialogDisplayer.getDefault().createDialog(dg);
        dd.setVisible(true);

    }//GEN-LAST:event_StatisticsButtonActionPerformed

    private void mExpandGroupButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mExpandGroupButtonActionPerformed
    {//GEN-HEADEREND:event_mExpandGroupButtonActionPerformed
        Collection picked = new HashSet(mNVV.getPickedVertexState().getPicked());
        for (Object v : picked)
        {
            if (v instanceof Graph)
            {
                Graph g = mNVV.getGraphCollapser().expand(mGraph, (Graph) v);
                mNVV.getRenderContext().getParallelEdgeIndexFunction().reset();
                mNVV.getGraphLayout().setGraph(g);
            }
        }
        mNVV.ClearSelected();
        mNVV.repaint();
    }//GEN-LAST:event_mExpandGroupButtonActionPerformed

    private void mCollapseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mCollapseButtonActionPerformed
    {//GEN-HEADEREND:event_mCollapseButtonActionPerformed
        Collection<String> picked = new HashSet(mNVV.getPickedVertexState().getPicked());
        if (picked.size() > 1)
        {
            DirectedSparseMultigraph inGraph = mGraph;
            DirectedSparseMultigraph<String, String> clusterGraph = (DirectedSparseMultigraph<String, String>) mNVV.getGraphCollapser().getClusterGraph(inGraph, picked);
            DirectedSparseMultigraph g = (DirectedSparseMultigraph) mNVV.getGraphCollapser().collapse(mGraph, clusterGraph);

            mNVV.getRenderContext().getParallelEdgeIndexFunction().reset();
            mNVV.getGraphLayout().setGraph(g);

            mNVV.getPickedVertexState().clear();
            mNVV.repaint();
        }
    }//GEN-LAST:event_mCollapseButtonActionPerformed

    private void mEdgeSearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mEdgeSearchButtonActionPerformed
    {//GEN-HEADEREND:event_mEdgeSearchButtonActionPerformed
        //Clear the current selection.
        mNVV.ClearSelected();
        String edge = mEdgeSearchTextArea.getText();
        Collection<String> SearchEdges = new ArrayList<String>();
        SearchEdges.addAll(Arrays.asList(edge.split("\n")));
        mNVV.PickGraphElement(SearchEdges, NetworkElementApi.NetworkElementType.EDGE);
        StatusDisplayer.getDefault().setStatusText(mNVV.getPickedEdges().size() + " edges detected.");
    }//GEN-LAST:event_mEdgeSearchButtonActionPerformed

    private void LoopRemovaljButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LoopRemovaljButtonActionPerformed
    {//GEN-HEADEREND:event_LoopRemovaljButtonActionPerformed
        this.LoopRemovalFunction();
    }//GEN-LAST:event_LoopRemovaljButtonActionPerformed

    private void mVertexSearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mVertexSearchButtonActionPerformed
    {//GEN-HEADEREND:event_mVertexSearchButtonActionPerformed
        mNVV.ClearSelected();
        String vertex = mVertexSearchTextArea.getText();
        Collection<String> SearchVertices = new ArrayList<String>();
        SearchVertices.addAll(Arrays.asList(vertex.split("\n")));
        mNVV.PickGraphElement(SearchVertices, NetworkElementApi.NetworkElementType.NODE);
        StatusDisplayer.getDefault().setStatusText(mNVV.getPickedVertices().size() + " vertices detected.");
    }//GEN-LAST:event_mVertexSearchButtonActionPerformed

    private void RemoveDeleteActionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RemoveDeleteActionButtonActionPerformed
    {//GEN-HEADEREND:event_RemoveDeleteActionButtonActionPerformed
        this.RemoveDeleteFunction();
    }//GEN-LAST:event_RemoveDeleteActionButtonActionPerformed

    private void mSuccessorsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mSuccessorsButtonActionPerformed
    {//GEN-HEADEREND:event_mSuccessorsButtonActionPerformed
        this.selectSuccesors();

    }//GEN-LAST:event_mSuccessorsButtonActionPerformed

    private void mPredecessorButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mPredecessorButtonActionPerformed
    {//GEN-HEADEREND:event_mPredecessorButtonActionPerformed
        this.selectPredecessors();

    }//GEN-LAST:event_mPredecessorButtonActionPerformed

    private void mFrequencyRemovalBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mFrequencyRemovalBtnActionPerformed
    {//GEN-HEADEREND:event_mFrequencyRemovalBtnActionPerformed

        for (int i = 0; i < mGraph.getVertexCount(); i++)
        {
            String vertex = mGraph.getVertices().toArray()[i].toString();
            if (mDataParser.getNodeTable().get(vertex).getUniqueFrequency() == 1)
            {
                mGraph.removeVertex(vertex);
                i--;
            }
        }

        for (int i = 0; i < mGraph.getEdgeCount(); i++)
        {
            String edge = mGraph.getEdges().toArray()[i].toString();
            if (mDataParser.getNodeTable().get(edge).getUniqueFrequency() == 1)
            {
                mGraph.removeEdge(edge);
                i--;
            }
        }

    }//GEN-LAST:event_mFrequencyRemovalBtnActionPerformed

    private void mCommunityBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mCommunityBtnActionPerformed
    {//GEN-HEADEREND:event_mCommunityBtnActionPerformed
        Set<Set<String>> clusters;

        EdgeBetweennessClusterer_mwj<String, String> EBC = new EdgeBetweennessClusterer_mwj<String, String>();
        //BetweennessCentrality<String, String> EBC = new BetweennessCentrality(mGraph);
        clusters = EBC.transform(mGraph);
        //EBC.evaluate();
        //jTextArea1.setText(EBC.getRankScoreKey());

        for (int clusterIterator = 0; clusterIterator < clusters.size(); clusterIterator++)
        {
            Set<String> cluster = (Set<String>) clusters.toArray()[clusterIterator];
            for (int vertexIterator = 0; vertexIterator < cluster.size(); vertexIterator++)
            {
                mDataParser.getNodeTable().get(cluster.toArray()[vertexIterator]).setClusterID(clusterIterator);
            }
        }
        vertexPainter<String> vertexPainter = (vertexPainter) mNVV.getRenderContext().getVertexFillPaintTransformer();
        vertexPainter.setClusterCount(clusters.size());

        JOptionPane.showMessageDialog(new JFrame(), "Decomposed: " + clusters.size() + " clusters.");

        mNVV.getRenderContext().setVertexFillPaintTransformer(vertexPainter);
        mNVV.repaint();
    }//GEN-LAST:event_mCommunityBtnActionPerformed

    private void mGenerateBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mGenerateBtnActionPerformed
    {//GEN-HEADEREND:event_mGenerateBtnActionPerformed
        //This is really awesome!
        DirectedSparseMultigraph<String, String> graph = (DirectedSparseMultigraph<String, String>) mNVV.GenerateSubgraph();
        if (mNVV.getDisplayType() == DisplayType.NETWORK)
        {
            NetworkDisplayTopComponent ndtc = new NetworkDisplayTopComponent(graph, DisplayType.NETWORK);
            ndtc.open();
        }
        if (mNVV.getDisplayType() == DisplayType.STEPBASED)
        {
            NetworkDisplayTopComponent ndtc = new NetworkDisplayTopComponent(graph, DisplayType.STEPBASED);
            ndtc.open();
            ndtc.setName("Stepbased Display");
            //StepBasedDisplayTopComponent sbdtc = new StepBasedDisplayTopComponent(mNVV.getDagGraph());
            //sbdtc.open();
        }
    }//GEN-LAST:event_mGenerateBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EdgeFrequencyFilterjLabel;
    private javax.swing.JButton LoopRemovaljButton;
    private javax.swing.JLabel NodeFrequencyFilterjLabel;
    private javax.swing.JButton RemoveDeleteActionButton;
    private javax.swing.JButton StatisticsButton;
    private GuiElements.RangeSlider edgeFrequencySlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton mCollapseButton;
    private javax.swing.JButton mCommunityBtn;
    private javax.swing.JButton mEdgeSearchButton;
    private javax.swing.JTextArea mEdgeSearchTextArea;
    private javax.swing.JButton mExpandGroupButton;
    private javax.swing.JButton mFrequencyRemovalBtn;
    private javax.swing.JButton mGenerateBtn;
    private javax.swing.JButton mPredecessorButton;
    private javax.swing.JButton mSuccessorsButton;
    private javax.swing.JButton mVertexSearchButton;
    private javax.swing.JTextArea mVertexSearchTextArea;
    private GuiElements.RangeSlider nodeFrequencySlider;
    // End of variables declaration//GEN-END:variables

    /**
     * Iterates through all the edges in mGraph and finds the edge with the
     * highest frequency.
     *
     * @return the frequency of that edge.
     */
    private int findMaxFrequency(NetworkElementApi.NetworkElementType type)
    {
        int maxFrequency = 0;

        if (type == NetworkElementType.EDGE)
        {
            for (int i = 0; i < mGraph.getEdgeCount(); i++)
            {
                String edgeKey = mGraph.getEdges().toArray()[i].toString();
                if (mDataParser.getEdgeTable().get(edgeKey).getUniqueFrequency() > maxFrequency)
                {
                    maxFrequency = mDataParser.getEdgeTable().get(edgeKey).getUniqueFrequency();
                }
            }
        }

        if (type == NetworkElementType.NODE)
        {
            for (int i = 0; i < mGraph.getVertexCount(); i++)
            {
                String vertexKey = mGraph.getVertices().toArray()[i].toString();
                if (mDataParser.getNodeTable().get(vertexKey).getUniqueFrequency() > maxFrequency)
                {
                    maxFrequency = mDataParser.getNodeTable().get(vertexKey).getUniqueFrequency();
                }
            }
        }
        return (maxFrequency);
    }

    private int findMaxFrequency(String type)
    {
        int maxFrequency = 0;

        if ("edge".matches(type))
        {
            for (int i = 0; i < mGraph.getEdgeCount(); i++)
            {
                String edgeKey = mGraph.getEdges().toArray()[i].toString();
                Integer TotalUniqueFreq = mDataParser.getDerivedData().getEdgeTable().get(edgeKey).getTotalUniqueFrequency();
                if (TotalUniqueFreq > maxFrequency)
                {
                    maxFrequency = TotalUniqueFreq;
                }
            }
        }

        if ("node".matches(type))
        {
            for (int i = 0; i < mGraph.getVertexCount(); i++)
            {
                String vertexKey = mGraph.getVertices().toArray()[i].toString();
                Integer TotalUniqueFreq = mDataParser.getDerivedData().getNodeTable().get(vertexKey).getTotalUniqueFrequency();
                if (TotalUniqueFreq > maxFrequency)
                {
                    maxFrequency = TotalUniqueFreq;
                }
            }
        }
        return (maxFrequency);
    }

    @Override
    public void componentOpened()
    {
        mDataParser = Lookup.getDefault().lookup(DataParser.class);
        ((NetworkVVDisplay) (WindowManager.getDefault().findTopComponent("NetworkDisplayTopComponent"))).RebroadcastNetworkVisualizationViewer();
        if (mDataParser.hasData())
        {
            this.buildEdgeFrequencySlider();
            this.buildNodeFrequencySlider();
            this.RefreshContents();
        }
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    public void InitializeNodeFrequencySlider()
    {
        this.nodeFrequencySlider.setMinimum(0);
        this.nodeFrequencySlider.setMaximum(this.findMaxFrequency(NetworkElementApi.NetworkElementType.NODE));
        this.nodeFrequencySlider.setValue(0);
        this.nodeFrequencySlider.setUpperValue(this.nodeFrequencySlider.getMaximum());
        Double doubleMax = (double) this.nodeFrequencySlider.getMaximum();
        Double majortick = doubleMax / 10.0f;
        if (this.nodeFrequencySlider.getMaximum() > 10)
        {
            this.nodeFrequencySlider.setMajorTickSpacing(majortick.intValue());
            Double val = majortick / 2;
            this.nodeFrequencySlider.setMinorTickSpacing(val.intValue());
        }
        if (mNVV != null)
        {
            //Update the vertexPainter
            if (mNVV.getRenderContext().getVertexFillPaintTransformer() instanceof vertexPainter)
            {
                ((vertexPainter) mNVV.getRenderContext().getVertexFillPaintTransformer()).setFrequencyThreshold(nodeFrequencySlider.getValue(), nodeFrequencySlider.getUpperValue());
            }
            //Update the JLabel that shows the rnage.
            NodeFrequencyFilterjLabel.setText("Node Frequency Filter" + "(" + nodeFrequencySlider.getValue() + ", " + nodeFrequencySlider.getUpperValue() + ")");
            //Update the Graph Label Painter
            ((NetworkElementGraphLabelFontTransformer) mNVV.getRenderContext().getVertexFontTransformer()).setFrequencyThreshold(nodeFrequencySlider.getValue(), nodeFrequencySlider.getUpperValue());
        }
    }

    private void buildNodeFrequencySlider()
    {
        this.InitializeNodeFrequencySlider();
        nodeFrequencySlider.addChangeListener(new ChangeListener()
        {
            @Override
            public void stateChanged(ChangeEvent e)
            {
                RangeSlider source = (RangeSlider) e.getSource();
                if (!source.getValueIsAdjusting())
                {
                    if (mDataParser.hasData())
                    {
                        if (mNVV.getRenderContext().getVertexFillPaintTransformer() instanceof vertexPainter)
                        {
                            ((vertexPainter) mNVV.getRenderContext().getVertexFillPaintTransformer()).setFrequencyThreshold(nodeFrequencySlider.getValue(), nodeFrequencySlider.getUpperValue());
                        }
                        if (mNVV.getRenderContext().getVertexFillPaintTransformer() instanceof stepBasedVertexPainter)
                        {
                            ((stepBasedVertexPainter) mNVV.getRenderContext().getVertexFillPaintTransformer()).setFrequencyThreshold(nodeFrequencySlider.getValue(), nodeFrequencySlider.getUpperValue());
                        }
                        mNVV.repaint();
                        NodeFrequencyFilterjLabel.setText("Node Frequency Filter" + "(" + nodeFrequencySlider.getValue() + ", " + nodeFrequencySlider.getUpperValue() + ")");
                        ((NetworkElementGraphLabelFontTransformer) mNVV.getRenderContext().getVertexFontTransformer()).setFrequencyThreshold(nodeFrequencySlider.getValue(), nodeFrequencySlider.getUpperValue());
                    }
                }
            }
        });
    }

    public void InitializeEdgeFrequencySlider()
    {
        this.edgeFrequencySlider.setMinimum(0);
        this.edgeFrequencySlider.setMaximum(this.findMaxFrequency(NetworkElementType.EDGE));
        this.edgeFrequencySlider.setValue(0);
        this.edgeFrequencySlider.setUpperValue(this.edgeFrequencySlider.getMaximum());

        Double doubleMax = (double) this.edgeFrequencySlider.getMaximum();
        Double majortick = doubleMax / 10.0f;
        if (this.edgeFrequencySlider.getMaximum() > 10)
        {
            this.edgeFrequencySlider.setMajorTickSpacing(majortick.intValue());
            Double val = majortick / 2;
            this.edgeFrequencySlider.setMinorTickSpacing(val.intValue());
        }
        if (mNVV != null)
        {
            //Hide the edges and nodes outside the range for edge painter.
            if (mNVV.getRenderContext().getEdgeDrawPaintTransformer() instanceof edgePainter)
            {
                ((edgePainter) mNVV.getRenderContext().getEdgeDrawPaintTransformer()).setFrequencyThreshold(edgeFrequencySlider.getValue(), edgeFrequencySlider.getUpperValue());
            }
            //Update the frequency Filter label to show the current active range.
            EdgeFrequencyFilterjLabel.setText("Edge Frequency Filter" + "(" + edgeFrequencySlider.getValue() + ", " + edgeFrequencySlider.getUpperValue() + ")");
            //Update the label painter, don't try filtered labels.
            ((NetworkElementGraphLabelFontTransformer) mNVV.getRenderContext().getEdgeFontTransformer()).setFrequencyThreshold(edgeFrequencySlider.getValue(), edgeFrequencySlider.getUpperValue());
        }
    }

    private void buildEdgeFrequencySlider()
    {
        this.InitializeEdgeFrequencySlider();
        edgeFrequencySlider.addChangeListener(new ChangeListener()
        {
            @Override
            public void stateChanged(ChangeEvent e)
            {
                RangeSlider source = (RangeSlider) e.getSource();
                if (!source.getValueIsAdjusting())
                {
                    if (mDataParser.hasData())
                    {
                        if (mNVV.getRenderContext().getEdgeDrawPaintTransformer() instanceof edgePainter)
                        {
                            ((edgePainter) mNVV.getRenderContext().getEdgeDrawPaintTransformer()).setFrequencyThreshold(edgeFrequencySlider.getValue(), edgeFrequencySlider.getUpperValue());
                        }
                        if (mNVV.getRenderContext().getEdgeDrawPaintTransformer() instanceof StepbasedEdgePainter)
                        {
                            ((StepbasedEdgePainter) mNVV.getRenderContext().getEdgeDrawPaintTransformer()).setFrequencyThreshold(edgeFrequencySlider.getValue(), edgeFrequencySlider.getUpperValue());
                        }
                        mNVV.repaint();
                        EdgeFrequencyFilterjLabel.setText("Edge Frequency Filter" + "(" + edgeFrequencySlider.getValue() + ", " + edgeFrequencySlider.getUpperValue() + ")");
                        ((NetworkElementGraphLabelFontTransformer) mNVV.getRenderContext().getEdgeFontTransformer()).setFrequencyThreshold(edgeFrequencySlider.getValue(), edgeFrequencySlider.getUpperValue());
                    }
                }
            }
        });
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void UpdateCurrentVV(NetworkVisualizationViewer currentVV, DisplayType type)
    {
        if (mDataParser.hasData())
        {
            mNVV = currentVV;
            mDisplayTypeFlag = type;
            mGraph = (DirectedSparseMultigraph<String, String>) mNVV.getGraphLayout().getGraph();
//            if (collapser == null)
//            {
            //               collapser = new GraphCollapser(mGraph);
//            }
            Integer nodeMaxFreq;
            Integer edgeMaxFreq;

            if (type == DisplayType.STEPBASED)
            {
                nodeMaxFreq = findMaxFrequency("node");
                this.nodeFrequencySlider.setMaximum(nodeMaxFreq);
                this.nodeFrequencySlider.setUpperValue(nodeMaxFreq);
                Double doubleMax = (double) this.nodeFrequencySlider.getMaximum();
                Double majortick = doubleMax / 10.0f;
                if (this.nodeFrequencySlider.getMaximum() > 10)
                {
                    this.nodeFrequencySlider.setMajorTickSpacing(majortick.intValue());
                    Double val = majortick / 2;
                    this.nodeFrequencySlider.setMinorTickSpacing(val.intValue());
                }

                edgeMaxFreq = findMaxFrequency("edge");
                this.edgeFrequencySlider.setMaximum(edgeMaxFreq);
                this.edgeFrequencySlider.setUpperValue(edgeMaxFreq);
                doubleMax = (double) this.edgeFrequencySlider.getMaximum();
                majortick = doubleMax / 10.0f;
                if (this.edgeFrequencySlider.getMaximum() > 10)
                {
                    this.edgeFrequencySlider.setMajorTickSpacing(majortick.intValue());
                    Double val = majortick / 2;
                    this.edgeFrequencySlider.setMinorTickSpacing(val.intValue());
                }
            }
            if (type == DisplayType.NETWORK)
            {
                nodeMaxFreq = this.findMaxFrequency(NetworkElementType.NODE);
                this.nodeFrequencySlider.setMaximum(nodeMaxFreq);
                this.nodeFrequencySlider.setUpperValue(nodeMaxFreq);
                Double doubleMax = (double) this.nodeFrequencySlider.getMaximum();
                Double majortick = doubleMax / 10.0f;
                if (this.nodeFrequencySlider.getMaximum() > 10)
                {
                    this.nodeFrequencySlider.setMajorTickSpacing(majortick.intValue());
                    Double val = majortick / 2;
                    this.nodeFrequencySlider.setMinorTickSpacing(val.intValue());
                }
                edgeMaxFreq = this.findMaxFrequency(NetworkElementType.EDGE);
                this.edgeFrequencySlider.setMaximum(edgeMaxFreq);
                this.edgeFrequencySlider.setUpperValue(edgeMaxFreq);
                doubleMax = (double) this.edgeFrequencySlider.getMaximum();
                majortick = doubleMax / 10.0f;
                if (this.edgeFrequencySlider.getMaximum() > 10)
                {
                    this.edgeFrequencySlider.setMajorTickSpacing(majortick.intValue());
                    Double val = majortick / 2;
                    this.edgeFrequencySlider.setMinorTickSpacing(val.intValue());
                }
            }
        } else
        {
            this.close();
        }
    }

    //@Override
    public void RefreshContents()
    {
    }

    @Override
    public void ClearContents()
    {
        mGraph = null;
        //collapser = null;
        mVertexSearchTextArea.setText("");
        mEdgeSearchTextArea.setText("");
        nodeFrequencySlider.setValue(0);
        nodeFrequencySlider.setUpperValue(0);
        edgeFrequencySlider.setValue(0);
        edgeFrequencySlider.setUpperValue(0);
    }

    public void selectPredecessors()
    {
        Set<String> selection = mNVV.getPickedVertexState().getPicked();
        //iterate the selection
        HashSet<String> Predecessors = new HashSet<String>();
        for (int i = 0; i < selection.size(); i++)
        {
            //create a list of predecessors
            Collection<String> xpredecessors = mGraph.getPredecessors(selection.toArray()[i].toString());
            if (xpredecessors != null)
            {
                Predecessors.addAll(xpredecessors);
            }
        }
        //iterate the complete predecessor list
        for (int i = 0; i < Predecessors.size(); i++)
        {//for the graph, pick each predecessor.
            mNVV.getPickedVertexState().pick(Predecessors.toArray()[i].toString(), true);
            //For the VertexPainter to work properly we need to setSelected to true, in the DataParser's NodeTable,
            //whenever we pick a vertex.
            mDataParser.getNodeTable().get(Predecessors.toArray()[i].toString()).setSelected(true);
        }
    }

    public void selectSuccesors()
    {
        Set<String> selection = mNVV.getPickedVertexState().getPicked();
        //iterate the selection
        HashSet<String> Successors = new HashSet<String>();
        for (int i = 0; i < selection.size(); i++)
        {
            //create a list of predecessors
            Collection<String> xSuccessors = mGraph.getSuccessors(selection.toArray()[i].toString());
            if (xSuccessors != null)
            {
                Successors.addAll(xSuccessors);
            }
        }
        //iterate the complete predecessor list
        for (int i = 0; i < Successors.size(); i++)
        {//for the graph, pick each predecessor.
            mNVV.getPickedVertexState().pick(Successors.toArray()[i].toString(), true);
            //For the VertexPainter to work properly we need to setSelected to true, in the DataParser's NodeTable,
            //whenever we pick a vertex.
            mDataParser.getNodeTable().get(Successors.toArray()[i].toString()).setSelected(true);
        }
    }

    private void RemoveDeleteFunction()
    {
        for (int i = 0; i < mGraph.getEdges().size(); i++)
        {
            String edgeKey = mGraph.getEdges().toArray()[i].toString();
            String action = mDataParser.getEdgeTable().get(edgeKey).getValue();
            if (action.compareTo("Del") == 0)
            {
                mGraph.removeEdge(edgeKey);
                i--;
            }
        }
    }

    private void LoopRemovalFunction()
    {
        for (int i = 0; i < mGraph.getEdges().size(); i++)
        {
            String edgeKey = mGraph.getEdges().toArray()[i].toString();
            if (mGraph.getSource(edgeKey) == null)
            {
                try
                {
                    throw new Exception("null source");
                } catch (Exception ex)
                {
                    Exceptions.printStackTrace(ex);
                }
            }

            if (mGraph.getDest(edgeKey) == null)
            {
                try
                {
                    throw new Exception("null destination");
                } catch (Exception ex)
                {
                    Exceptions.printStackTrace(ex);
                }
            }

            if (mGraph.getSource(edgeKey).compareTo(
                    mGraph.getDest(edgeKey)) == 0)
            {
                mGraph.removeEdge(edgeKey);
                i--;
            }
        }
    }
}
