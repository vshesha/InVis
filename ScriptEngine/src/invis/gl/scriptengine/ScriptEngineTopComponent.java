/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package invis.gl.scriptengine;

import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import invis.gl.dataprocessor.DataParser;
import invis.gl.graphviewer.NetworkDisplayTopComponent;
import invis.gl.networkapi.NetworkVVDisplay;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//invis.gl.scriptengine//ScriptEngine//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "ScriptEngineTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "invis.gl.scriptengine.ScriptEngineTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ScriptEngineAction",
preferredID = "ScriptEngineTopComponent")
@Messages(
{
    "CTL_ScriptEngineAction=ScriptEngine",
    "CTL_ScriptEngineTopComponent=ScriptEngine Window",
    "HINT_ScriptEngineTopComponent=This is a ScriptEngine window"
})
public final class ScriptEngineTopComponent extends TopComponent
{

    private final DataParser mDataParser;

    public ScriptEngineTopComponent()
    {
        initComponents();
        mDataParser = Lookup.getDefault().lookup(DataParser.class);
        setName(Bundle.CTL_ScriptEngineTopComponent());
        setToolTipText(Bundle.HINT_ScriptEngineTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        mProgramCodeTextBox = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        mProgramCodeTextBox.setColumns(20);
        mProgramCodeTextBox.setRows(5);
        mProgramCodeTextBox.setText(org.openide.util.NbBundle.getMessage(ScriptEngineTopComponent.class, "ScriptEngineTopComponent.mProgramCodeTextBox.text")); // NOI18N
        jScrollPane1.setViewportView(mProgramCodeTextBox);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ScriptEngineTopComponent.class, "ScriptEngineTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        ScriptEngineManager mgr = new ScriptEngineManager();
        ScriptEngine jsEngine = mgr.getEngineByName("JavaScript");
        String jsCode = mProgramCodeTextBox.getText(); //get script
        String program = "function myFunc(){ " + jsCode + " }";

        Invocable inv = (Invocable) jsEngine;
        jsEngine.put("theGraph", mDataParser.getGraph());

        try
        {
            //evaluate script
            jsEngine.eval(program);
        } catch (ScriptException ex)
        {
            Exceptions.printStackTrace(ex);
        }
        
        try
        {
            inv.invokeFunction("myFunc", "");
        } catch (ScriptException ex)
        {
            Exceptions.printStackTrace(ex);
        } catch (NoSuchMethodException ex)
        {
            Exceptions.printStackTrace(ex);
        }
        DirectedSparseMultigraph<String, String> graph = (DirectedSparseMultigraph<String, String>) jsEngine.get("theGraph");
        mDataParser.UpdateGraph(graph);
        /*        try
         {
         //run script on graph
         invocableEngine.invokeMethod(get, "method", null);
         } catch (ScriptException ex)
         {
         Exceptions.printStackTrace(ex);
         } catch (NoSuchMethodException ex)
         {
         Exceptions.printStackTrace(ex);
         }*/
        ((NetworkVVDisplay) (WindowManager.getDefault().findTopComponent("NetworkDisplayTopComponent"))).RefreshGraph();



        //invocableEngine.invokeFunction(toRun, mDataParser.getNodeTable());
        //return (boolean)invocableEngine.invokeFunction("frequency", data.vertexHashmap.get(obj).frequency);

        StatusDisplayer.getDefault().setStatusText("Program executed successfully.");

    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mProgramCodeTextBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
